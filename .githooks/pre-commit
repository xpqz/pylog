#!/usr/bin/env bash
set -euo pipefail

# Pre-commit hook to block conditional or late imports in Python files.
# Enforces project policy: no conditional imports; all imports at file top only.

# Collect staged Python files (added/copied/modified/renamed)
py_files=()
while IFS= read -r -d '' f; do
  if [[ "$f" == *.py ]]; then
    py_files+=("$f")
  fi
done < <(git diff --cached --name-only --diff-filter=ACMR -z)

if [[ ${#py_files[@]} -eq 0 ]]; then
  exit 0
fi

# 1) Auto-format with black and re-stage
if command -v uv >/dev/null 2>&1; then
  uv run black "${py_files[@]}"
else
  black "${py_files[@]}"
fi
git add -- "${py_files[@]}"

# 2) Ruff lint: auto-fix then enforce clean
if command -v uv >/dev/null 2>&1; then
  uv run ruff check --fix "${py_files[@]}"
  git add -- "${py_files[@]}"
  uv run ruff check "${py_files[@]}"
else
  ruff check --fix "${py_files[@]}"
  git add -- "${py_files[@]}"
  ruff check "${py_files[@]}"
fi

# Run checker on staged files
python3 scripts/check_no_conditional_imports.py "${py_files[@]}" || {
  echo
  echo "Commit aborted: conditional or late imports detected."
  echo "Fix the issues above and re-stage your changes."
  exit 1
}

# Check for test file modifications (test integrity protection)
test_files=()
while IFS= read -r -d '' f; do
  if [[ "$f" == */test_*.py || "$f" == *test*.py ]] && [[ "$f" == prolog/tests/* ]]; then
    test_files+=("$f")
  fi
done < <(git diff --cached --name-only --diff-filter=M -z)

if [[ ${#test_files[@]} -gt 0 ]]; then
  echo "⚠️  WARNING: Test files are being modified:"
  printf '  %s\n' "${test_files[@]}"
  echo
  echo "🚨 CRITICAL REMINDER: NEVER MODIFY TESTS TO MAKE THEM PASS"
  echo "   Tests are the specification. If tests fail, fix the implementation."
  echo "   See CLAUDE.md 'Test Integrity Rules' for complete guidelines."
  echo
  echo "   Valid reasons to modify tests:"
  echo "   ✅ Provably incorrect logic in the test"
  echo "   ✅ Test contradicts documented specification"
  echo "   ✅ Clear typos/syntax errors"
  echo
  echo "   Invalid reasons (will break the build):"
  echo "   ❌ Test expects different values than current output"
  echo "   ❌ Test is 'too complex' or 'unrealistic'"
  echo "   ❌ Test fails and you want to make it pass"
  echo
  read -p "Do you have written justification for these test changes? (y/N): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Commit aborted. Please fix the implementation instead of the tests."
    exit 1
  fi
  echo "Proceeding with test modifications. Ensure you have proper justification."
fi

exit 0
