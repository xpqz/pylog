name: Policy - No AI Attribution

# Workflow disabled - comment out the 'on' section to re-enable
# on:
#   pull_request:
#     types: [opened, edited, synchronize, reopened]
#   push:
#     branches:
#       - main

permissions:
  contents: read
  pull-requests: read

jobs:
  check-pr-policy:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR title/body for prohibited terms
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          set -euo pipefail
          TEXT="$PR_TITLE
          $PR_BODY"
          # Prohibited patterns (case-insensitive)
          # - Vendor/product names
          # - AI attribution phrases
          # - Co-Authored-By lines referencing AI vendors
          if echo "$TEXT" | grep -E -i -q '(claude|anthropic|chatgpt|openai|gpt-4|gpt-3\.5|copilot|co[ -]?pilot|ai assistance|ai-assisted|ai[- ]generated|generated (with|by) ai|co-?authored-?by:.*(claude|anthropic|chatgpt|openai))'; then
            echo "PR title/body contains prohibited AI attribution terms." >&2
            exit 1
          fi

      - name: Check PR commits for prohibited terms
        env:
          GH_REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 - <<'PY'
          import os, sys, json, urllib.request, re

          token = os.environ['GITHUB_TOKEN']
          repo = os.environ['GH_REPO']
          pr_number = os.environ['PR_NUMBER']

          url = f'https://api.github.com/repos/{repo}/pulls/{pr_number}/commits'
          req = urllib.request.Request(
              url,
              headers={
                  'Authorization': f'Bearer {token}',
                  'Accept': 'application/vnd.github+json',
                  'X-GitHub-Api-Version': '2022-11-28',
              },
          )
          with urllib.request.urlopen(req) as resp:
              data = resp.read()
          commits = json.loads(data.decode('utf-8'))

          pattern = re.compile(r'''(
              claude|
              anthropic|
              chatgpt|
              openai|
              gpt-4|
              gpt-3\.5|
              copilot|
              co[ -]?pilot|
              ai[ ]assistance|
              ai-assisted|
              ai[- ]generated|
              generated[ ](with|by)[ ]ai|
              co-?authored-?by:.*(claude|anthropic|chatgpt|openai)
            )''', re.I | re.X)
          violations = []
          for c in commits:
              msg = c.get('commit', {}).get('message', '')
              if pattern.search(msg):
                  sha = c.get('sha', '')[:7]
                  first = msg.splitlines()[0]
                  violations.append((sha, first))

          if violations:
              print('Found prohibited terms in commit messages:')
              for sha, first in violations:
                  print(f'  - {sha}: {first}')
              sys.exit(1)
          print('No prohibited terms found in commit messages.')
          PY

      - name: Check PR comments and reviews for prohibited terms
        env:
          GH_REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 - <<'PY'
          import os, sys, json, urllib.request, re

          token = os.environ['GITHUB_TOKEN']
          repo = os.environ['GH_REPO']
          pr_number = os.environ['PR_NUMBER']

          headers = {
              'Authorization': f'Bearer {token}',
              'Accept': 'application/vnd.github+json',
              'X-GitHub-Api-Version': '2022-11-28',
          }

          def gh_get(url):
              req = urllib.request.Request(url, headers=headers)
              with urllib.request.urlopen(req) as resp:
                  return json.loads(resp.read().decode('utf-8'))

          issue_comments = gh_get(f'https://api.github.com/repos/{repo}/issues/{pr_number}/comments')
          review_comments = gh_get(f'https://api.github.com/repos/{repo}/pulls/{pr_number}/comments')
          reviews = gh_get(f'https://api.github.com/repos/{repo}/pulls/{pr_number}/reviews')

          pattern = re.compile(r'''(
              claude|
              anthropic|
              chatgpt|
              openai|
              gpt-4|
              gpt-3\.5|
              copilot|
              co[ -]?pilot|
              ai[ ]assistance|
              ai-assisted|
              ai[- ]generated|
              generated[ ](with|by)[ ]ai|
              co-?authored-?by:.*(claude|anthropic|chatgpt|openai)
            )''', re.I | re.X)

          violations = []
          for c in issue_comments:
              body = c.get('body') or ''
              if pattern.search(body):
                  violations.append(('issue_comment', c.get('html_url', ''), body.splitlines()[0]))
          for c in review_comments:
              body = c.get('body') or ''
              if pattern.search(body):
                  violations.append(('review_comment', c.get('html_url', ''), body.splitlines()[0]))
          for r in reviews:
              body = r.get('body') or ''
              if pattern.search(body):
                  violations.append(('review', r.get('html_url', ''), body.splitlines()[0] if body else '(no title)'))

          if violations:
              print('Found prohibited terms in PR comments/reviews:')
              for kind, url, first in violations:
                  print(f'  - {kind}: {url} :: {first}')
              sys.exit(1)
          print('No prohibited terms found in PR comments or reviews.')
          PY

  check-push-policy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Scan pushed commit messages for prohibited terms
        env:
          BEFORE: ${{ github.event.before }}
          AFTER: ${{ github.sha }}
        run: |
          set -euo pipefail
          RANGE="${BEFORE}..${AFTER}"
          # Handle initial commit or unknown BEFORE
          if [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            RANGE="$AFTER"
          fi
          msgs=$(git log --format='%H %s%n%b%n---END---' $RANGE)
          echo "$msgs" | awk 'BEGIN{RS="---END---"} {print}' > /tmp/msgs.txt
          if grep -E -i -q '(claude|anthropic|chatgpt|openai|gpt-4|gpt-3\.5|copilot|co[ -]?pilot|ai assistance|ai-assisted|ai[- ]generated|generated (with|by) ai|co-?authored-?by:.*(claude|anthropic|chatgpt|openai))' /tmp/msgs.txt; then
            echo "Pushed commit messages contain prohibited AI attribution terms." >&2
            echo "Offending commits:" >&2
            git log --format='%h %s' $RANGE | sed 's/^/  - /'
            exit 1
          fi
          echo "No prohibited terms found in pushed commit messages."
