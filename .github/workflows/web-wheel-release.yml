name: Web Wheel Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for manual run (e.g., 0.1.0)'
        required: false
        default: ''

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-publish-web-wheels:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock

      - name: Set up Python 3.11
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            VERSION=${VERSION#v}
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract from pyproject.toml
            VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building wheels for version: $VERSION"

      - name: Build web wheels
        run: |
          # Ensure build script is executable
          chmod +x ./build-wheels.sh

          # Build both standard and web wheels
          ./build-wheels.sh

          # List what was built
          ls -la dist/

      - name: Download lark wheel
        run: |
          # Create temp directory for downloading lark
          mkdir -p temp-lark
          cd temp-lark

          # Download lark wheel (latest compatible version) using system pip
          python3 -m pip download --only-binary=:all: --no-deps lark

          # Move lark wheel to dist directory
          mv lark-*.whl ../dist/
          cd ..
          rm -rf temp-lark

      - name: Prepare release assets
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Generate checksums for all wheels
          cd dist
          sha256sum *.whl > checksums.txt

          # Log what will be released
          echo "Assets for release v${VERSION}:"
          ls -la
          echo "Checksums:"
          cat checksums.txt

      - name: Deploy wheels to repository
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG_NAME="v${VERSION}"

          # Find wheel files
          WEB_WHEEL=$(ls dist/pylog-*-web-py3-none-any.whl)
          LARK_WHEEL=$(ls dist/lark-*.whl)
          CHECKSUMS_FILE="dist/checksums.txt"

          # Create wheels directory for repository hosting
          mkdir -p wheels
          cp "$WEB_WHEEL" wheels/
          cp "$LARK_WHEEL" wheels/
          cp "$CHECKSUMS_FILE" wheels/

          # Create manifest for Web REPL
          cat > wheels/manifest.json << EOF
          {
            "version": "${VERSION}",
            "tag": "${TAG_NAME}",
            "pylog": {
              "wheel": "$(basename "$WEB_WHEEL")",
              "version": "${VERSION}",
              "url": "https://cdn.jsdelivr.net/gh/xpqz/pylog@main/wheels/$(basename "$WEB_WHEEL")"
            },
            "lark": {
              "wheel": "$(basename "$LARK_WHEEL")",
              "url": "https://cdn.jsdelivr.net/gh/xpqz/pylog@main/wheels/$(basename "$LARK_WHEEL")"
            },
            "generated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "checksums": "checksums.txt"
          }
          EOF

          echo "Generated wheel manifest:"
          cat wheels/manifest.json

          # Also create GitHub release for versioning
          cat > release_notes.md << EOF
          # PyLog v${VERSION} - Web REPL Assets

          This release contains PyLog wheels compatible with Pyodide for use in the Web REPL.

          ## CDN URLs (JsDelivr)

          - **PyLog**: https://cdn.jsdelivr.net/gh/xpqz/pylog@main/wheels/$(basename "$WEB_WHEEL")
          - **Lark**: https://cdn.jsdelivr.net/gh/xpqz/pylog@main/wheels/$(basename "$LARK_WHEEL")
          - **Manifest**: https://cdn.jsdelivr.net/gh/xpqz/pylog@main/wheels/manifest.json

          ## Installation in Pyodide

          \`\`\`javascript
          // Via manifest
          const manifest = await (await fetch('https://cdn.jsdelivr.net/gh/xpqz/pylog@main/wheels/manifest.json')).json();
          await micropip.install(manifest.lark.url);
          await micropip.install(manifest.pylog.url);
          \`\`\`

          ## Generated

          - Build time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Commit: ${{ github.sha }}
          - Workflow: ${{ github.workflow }}
          EOF

          # Create the release for versioning
          gh release create "$TAG_NAME" \
            "$WEB_WHEEL" \
            "$LARK_WHEEL" \
            "$CHECKSUMS_FILE" \
            --title "PyLog v${VERSION}" \
            --notes-file release_notes.md \
            --draft

          echo "Created draft release: $TAG_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit wheels to repository
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add -f wheels/

          if git diff --staged --quiet; then
            echo "No wheel changes to commit"
          else
            git commit -m "Deploy wheels for v${VERSION} to repository

          - PyLog wheel: $(ls wheels/pylog-*.whl | xargs basename)
          - Lark wheel: $(ls wheels/lark-*.whl | xargs basename)
          - CDN accessible via JsDelivr at cdn.jsdelivr.net/gh/xpqz/pylog@main/wheels/"
            git push origin HEAD:main
            echo "Wheels committed and pushed to main branch"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}